import praw
import requests
from PIL import Image
import os
from datetime import datetime
from io import BytesIO

# need to add to secret / gitignore but for testing right now let's use

CLIENT_ID = 'YOUR_CLIENT_ID'
CLIENT_SECRET = 'YOUR_CLIENT_SECRET'
USER_AGENT = 'YOUR_USER_AGENT'

# Authenticate to Reddit's API and create a Reddit instance
reddit = praw.Reddit(client_id=CLIENT_ID,
                     client_secret=CLIENT_SECRET,
                     user_agent=USER_AGENT)

# function to fetch memes


def fetch_memes(time_filter, num_memes):
    memes_subreddit = reddit.subreddit("memes")

    # Get the top `num_memes` most upvoted memes in the last 24 hours
    top_posts = memes_subreddit.top(time_filter, limit=num_memes)

    data = []
    for post in top_posts:
        url = post.url
        data.append(url)

    return data


def download_memes(meme_urls):
    # Get the current date in UTC
    now = datetime.utcnow().strftime('%Y-%m-%d')

    # Create a folder with the current date
    folder_name = f'{now}_memes'
    os.makedirs(folder_name, exist_ok=True)

    for i, url in enumerate(meme_urls):
        response = requests.get(url)
        if response.status_code == 200 and (url.endswith('.jpg') or url.endswith('.png')):
            image = Image.open(BytesIO(response.content))
            # Convert the image to RGB mode if necessary
            if image.mode != 'RGB':
                image = image.convert('RGB')
            image.save(f'{folder_name}/meme_{i+1}.jpg')


if __name__ == "__main__":
    # Fetch the top 5 memes of the day by upvotes
    meme_urls = fetch_memes('day', 5)

# Download and store the memes in a local folder
    download_memes(meme_urls)

# modify the code to include all image formats that are supported by PIL and convertible to .jpg or .png

import praw
import requests
from PIL import Image
import os
from datetime import datetime
from io import BytesIO

# need to add to secret / gitignore but for testing right now let's use

CLIENT_ID = 'rWtcfEUDSAcqQ3_TSfuCwQ'
CLIENT_SECRET = 'ronUz5OA2pk0B9JtUWsrUCavXT3HSA'
USER_AGENT = 'redditdev meme downloader by u/SetInteresting6212'

# Authenticate to Reddit's API and create a Reddit instance
reddit = praw.Reddit(client_id=CLIENT_ID,
                     client_secret=CLIENT_SECRET,
                     user_agent=USER_AGENT)

# function to fetch memes


def fetch_memes(time_filter, num_memes):
    memes_subreddit = reddit.subreddit("memes")

    # Get the top `num_memes` most upvoted memes in the last 24 hours
    top_posts = memes_subreddit.top(time_filter, limit=num_memes)

    data = []
    for post in top_posts:
        url = post.url
        data.append(url)

    return data


def download_memes(meme_urls):
    # Get the current date in UTC
    now = datetime.utcnow().strftime('%Y-%m-%d')

    # Create a folder with the current date
    folder_name = f'{now}_memes'
    os.makedirs(folder_name, exist_ok=True)

    for i, url in enumerate(meme_urls):
        response = requests.get(url)
        if response.status_code == 200 and (url.endswith('.jpg') or url.endswith('.png') or url.endswith('.gif') or url.endswith('.bmp') or url.endswith('.tiff') or url.endswith('.webp')):
            image = Image.open(BytesIO(response.content))
            # Convert the image to RGB mode if necessary
            if image.mode != 'RGB':
                image = image.convert('RGB')
            image.save(f'{folder_name}/meme_{i+1}.jpg')
            print(f'Meme saved at: {folder_name}/meme_{i+1}.jpg')



if __name__ == "__main__":
    # Fetch the top 5 memes of the day by upvotes
    meme_urls = fetch_memes('day', 5)

# Download and store the memes in a local folder
    download_memes(meme_urls)
    print(f"Memes downloaded: {len(meme_urls)}")
